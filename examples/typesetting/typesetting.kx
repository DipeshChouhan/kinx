using Typesetting;
using typesetting.style.ArticleA4;

var doc = new Typesetting.Document(Typesetting.Style.ArticleA4, { toc: true, xref: "xref.json" });

doc.title("Kinx TT - Kinx Tiny Typesetting");
doc.abstract(%{
    This system is a small typesetting system written in Kinx.
    Most of people knows the \LaTeX\footnote{Leslie Lamport, https://en.wikipedia.org/wiki/LaTeX} is being used for that purpose,
    but the \TeX\footnote{Donald E. Knuth, https://en.wikipedia.org/wiki/TeX} system is very huge.
    This system provides only a limited functionality,
    but supports some of \TeX algorithms in this small system.
    This would be your best partner as long as used for your personal use.
});

doc.toc();

doc.section("Overview");
doc.subSection("Goals");

doc.paragraph(%{
    The goal of the Kinx Tiny Typesetting is as follows.
});

doc.itemize({
    labelType: 'item',
    items: [
        "Keeping it small.",
        "Pretty beautiful.",
        "Direct output to PDF.",
    ]
});

doc.paragraph(%{
    Kinx TT has supported some kind of \TeX algorithms, so the final output would be pretty beautiful.
    You can check it yourself as this document was generated by this system.
    On the other hand, there are some known bad points below as a trade off.
});

doc.itemize({
    labelType: 'item',
    items: [
        "Needs a performance improvement.",
        "Prvides only a limited functionality.",
    ]
});

doc.subSection("Features Overview");

doc.paragraph(%{This system supports following algorithms.});
doc.itemize({
    labelType: 'enum',
    items: [
        "Hyphenation & Knuth-Plass Line Breaking Algorithm, and also for some Japanese rules.",
        "Widows & Orphans penalty control.",
        "Listing items with a bullet or numbering.",
        "Math formula & equation like \\TeX",
        "Tables, and the header of table is automatically repeated each page.",
        "Images, and it can be also put with floating inside paragraph.",
        "Writing a program source code.",
        "Cross-reference like \\bold{Reference to the section \\nameref{Sec:Table}} in the page \\pageref{Sec:Table}.",
        "Autimatic URL link like https://en.wikipedia.org/wiki/TeX, or link text like \\url[https://en.wikipedia.org/wiki/TeX]{\\TeX}.",
        "Footnotes\\footnote{This is a footnote example.}.",
        "\\ruby[how to read]{Japanese Ruby}. \\ruby[にほんご]{日本語}, or \\ruby[に|ほん|ご]{日本語} to be separated for each character.",
    ]
});

doc.pageBreak();

doc.section({ label: "Sec:FeatureDetail" }, "Features Details");
doc.subSection("Hyphenation & Line Breaking");

doc.image({
    label: "Fig:Hyphenation",
    float: { right: true },
    scale: 0.6,
    caption: "Hyphenation and justification",
    file: "examples/typesetting/linebreak.png",
});
doc.paragraph(%{
    The figure on the right\footnote{This is also the example of a floating image.} is an example of hyphenation and justification.
    Hyphenation will be done before applying line-breaking algorithm.
    The algorithm is based on \monotype{Hyper.js},
    and it relies on the hyphenation algorithm by Franklin M. Liang commonly known from \LaTeX.

    And also, this system is supporting \bold{Knuth-Plass Line Breaking Algorithm} for line-break.
    This is well known algorithm because the \TeX uses it.
    These algorithms are known as the best way so far for a typesetting system.

    Kinx TT is also supporting some Japanese hyphenation rules.
    For example, 「。」, which is like a period in English, is never appeared at the head of line.
});

doc.subSection("Widows & Orphans");

doc.paragraph(%{
    Widows and orphans control is not perfect so far.
    But normally it is available for a section and a paragraph.
    Unfortunately it is not available for listing items, images, and so on.
    Please check it and you can use \monotype{\\columnbreak} command anywhere you need.
});

doc.subSection("List Items");

doc.paragraph(%{
    You can use an \bold{itemize} and an \bold{enumerate} listing items as follows.
});

doc.setColumn(2);
doc.paragraph(%{
    Here is an example of 'itemize'.
});
doc.itemize({
    labelType: 'item',
    items: [
        "Item level 1-1",
        "Item level 1-2",
        {
            labelType: 'item',
            items: [
                "Item level 2-1",
                "Item level 2-2",
                "Item level 2-3",
                {
                    labelType: 'item',
                    items: [
                        "Item level 3-1",
                        "Item level 3-2",
                        {
                            labelType: 'item',
                            items: [
                                "Item level 4-1",
                                "Item level 4-2",
                            ]
                        },
                    ]
                },
            ]
        },
    ]
});
doc.columnBreak();
doc.paragraph(%{
    Here is an example of 'enumerate'.
});
doc.itemize({
    labelType: 'enum',
    items: [
        "Item level 1-1",
        "Item level 1-2",
        {
            labelType: 'enum',
            items: [
                "Item level 2-1",
                "Item level 2-2",
                "Item level 2-3",
                {
                    labelType: 'enum',
                    items: [
                        "Item level 3-1",
                        "Item level 3-2",
                        {
                            labelType: 'enum',
                            items: [
                                "Item level 4-1",
                                "Item level 4-2",
                            ]
                        },
                    ]
                },
            ]
        },
    ]
});
doc.setColumn(1);
doc.columnBreak();

doc.subSection("Math Formula and Equation");

doc.paragraph(%{
    Here is an example of Math formula and equation.
    You will think as if it is \LaTeX output.
    Yes, you are quite right because this is came from \TeX output,
    but it is never using a huge \TeX system.
    Instead, it is using an output of \KaTeX, which is included in this system.
});

doc.math({ label: [["Math:1", 0.2], ["Math:2", 0.6]] }, %{
    \begin{aligned}
        E &= mc^2 \\
        m &= \frac{m_0}{\sqrt{1-\frac{v^2}{c^2}}} \\
    \end{aligned}
});
doc.math({ label: "Math:3" }, %{
    \begin{aligned}
        \int_{-\infty}^{\infty} f(x) dx &= \sqrt{\pi}
    \end{aligned}
});

doc.imageCaption("Math example");

doc.paragraph(%{
    If you want to write a math formula inline, use \verb{$...$} style directly in paragraph.
    For example, $E = mc^2$ is written as \verb{$E = mc^2$},
    and another example by inline mode is $\int_{-\infty}^{\infty} f(x) dx = \sqrt{\pi}$ same as \ref[math]{Math:3}.
    As \KaTeX does not support \monotype{\\label} command, the label is being provided by Kinx TT.
    Therefore note that you need to control it by yourself a little.

    If you want to use just ``\$'' in paragraph, use \$ with \\ as \verb{\$}.

    And also you can use \verb{\displaystyle} keyword.
    The Math formula can be directly put inside paragraph like $\displaystyle\int_{-\infty}^{\infty} f(x) dx = \sqrt{\pi}$,
    by \verb{$\displaystyle\int_{-\infty}^{\infty} f(x) dx = \sqrt{\pi}$}.
});

doc.subSection({ label: "Sec:Table" }, "Table");

doc.paragraph(%{
    Here is an example of table.
    The ruled line can be selected from no line, a single line, or a double line.
    And you can set an alignment each column.
    Besides, the column width is also automatically calculated according to inside text size.

    By the way, you can write also a Math formula inside a table cell.
});

var line = 0;
doc.table({
    header: 0,
    # size: 0.9,
    # align: "l",
    cellAlign: "l||c|r",
    body: [
        "---",
        [
            "Left",
            "Center",
            "Right"
        ],
        "===",
        [
            "A1",
            "B1\\footnote{This is a footnote in table.}",
            "C1",
        ],
        "---",
        [
            "A2",
            "This column is aligned to the center.",
            "C2",
        ],
        "---",
        [
            "A3",
            "$\\displaystyle\\int_{-\\infty}^{\\infty} f(x) dx = \\sqrt{\\pi}$",
            "Aligned to the right.",
        ],
        "---",
        [ ""+(++line), "Aligned to the center.", "On the right." ], "---",
        [ ""+(++line), "Aligned to the center.", "On the right." ], "---",
        [ ""+(++line), "Aligned to the center.", "On the right." ], "---",
        [ ""+(++line), "Aligned to the center.", "On the right." ], "---",
        [ ""+(++line), "Aligned to the center.", "On the right." ], "---",
    ]
});
doc.paragraph(%{
    The table header can be automatically repeated each page.
});

doc.paragraph(%{
    Tables can be put on a line by using multiple columns.
    Here is an example of 2 tables in a line.
    Note that the width will be becoming narrow in this case.
});

doc.setColumn(2);
doc.table({
    header: 0,
    cellAlign: "cl",
    body: [
        "---",
        [
            "#",
            "Outline",
        ],
        "===",
        [
            "1",
            "Something",
        ],
        [
            "2",
            "Something",
        ],
        "---",
    ]
});
doc.columnBreak();
doc.table({
    header: 0,
    cellAlign: "cl",
    body: [
        "---",
        [
            "#",
            "Overview",
        ],
        "===",
        [
            "1",
            "Something",
        ],
        [
            "2",
            "Something",
        ],
        "---",
        [
            "3",
            "$\\displaystyle\\int_{-\\infty}^{\\infty} f(x) dx = \\sqrt{\\pi}$ is\\\\\nan example of Math formula in the table.",
        ],
        "---",
    ]
});
doc.setColumn(1);

doc.subSection("Image");

doc.subSubSection("Floating Image");

doc.paragraph(%{
    Images can be put around a text, or put on a line as a standalone.
});

doc.image({
    float: { left: true },
    scale: 0.6,
    caption: "Barcode Icon",
    file: "examples/typesetting/serial.png",
});

doc.paragraph(%{
    The first example is for a floating image put around a text.
    The image on the left, which is a barcode icon example, is wrapped inside text.

    And also, the text around a floating image can be separated by multiple paragraphs like this.
    The line-break algorithm is correctly performed for a different width per line.
    By this mechanism, the text will wrap around a floating image and you can do it with only writing a paragraph as usual.
    You will be able to see this line is put under the image automatically.

    By the way, the scale for a floating image means the parcentage for the actual image size.
    Note that it is different from a scale for a non-floating image.

    You can also put a reference to an image like \nameref{Fig:Hyphenation}.
});

doc.subSubSection("Standalone Image");

doc.paragraph(%{
    This is an example of an image scaled at 80%, and the image is put with a caption.
    This scale for a non-floating image means a parcentage for the area within the margins.
    \image[scale=0.8,caption=Figure Example - Kinx Logo Image]{examples/typesetting/kinxlogo.png}
    This is an example of an image scaled at 50%.
    \image[scale=0.5]{examples/typesetting/kinxlogo.png}
    As you see the example above, the image can be directly put into a paragraph.
    Note that you can not float an image in this way,
    and you have to use \verb{\floatimage} command instead.
});

doc.paragraph(%{
    If you want to multiple images in a line, please see below.
});

doc.setColumn(3);
doc.paragraph(%{
    \image[scale=0.95]{examples/typesetting/kinxlogo.png}
});
doc.columnBreak();
doc.paragraph(%{
    \image[scale=0.95]{examples/typesetting/kinxlogo.png}
});
doc.columnBreak();
doc.paragraph(%{
    \image[scale=0.95]{examples/typesetting/kinxlogo.png}
});
doc.setColumn(1);

doc.paragraph(%{
    You will see 3 images in a line.
});

doc.subSection("Program Code");

doc.paragraph(%{
    Here is an example of a source code.
    This code is a simple Kinx code of fibonacci function.
});

doc.code(%{
function fib(n) {
    if (n < 3) return n;
    return fib(n-2) + fib(n-1);
}

System.println("fib(34) = ", fib(34));
});

doc.save("examples/typesetting/typesetting.pdf");

System.println("done.");
